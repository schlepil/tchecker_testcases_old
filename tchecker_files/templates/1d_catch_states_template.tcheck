# Translation of 1d catch to tchecker
# In this template each (sub)-funnel will get its own discrete state (Not just a discrete variable)

# The catching events have to be generated by python

system:LIN_Catch

# The clocks
clock:1:glob
clock:1:ctrl
clock:1:local

# The events
event:noaction
event:start
event:catch
event:deliver

# Necessary variables
# Number of currently carried items
int:1:0:__maxCarry__:0:carried
# Number of packages to be returned : __nbrPack__
# Number of already delivered packages
int:1:0:__nbrPack__:0:delivered

# Necessary processes
# Synchronizer for start
process:starter
# Process for the "conveyor belt"
process:belt
# The system/robot catching the packages
process:rob

# MINIMAL LOCATIONS

# Define the starter
location:starter:waiting{initial::committed:}
location:starter:running{}

# Define the belt
# Initial - waiting for starter
location:belt:waiting{initial:}
# package not yet in position
location:belt:approach{committed:}
# Package ready to be to be caught
location:belt:arrived{committed:}
# All packages are successfully delivered
location:belt:success{labels:alldelivered}

# Define the robot/system initial state, funnel system later set via script
# Locations base
location:rob:waiting{initial::committed:}
# Other locations (needed for init_funnel)
# Define the robot/system
# Robot funnel states
__RobFunnelStates__


# synchronisations
# all go
sync:starter@start:belt@start:rob@start
# catching
sync:belt@catch:rob@catch
# delivering
sync:belt@deliver:rob@deliver

# The transitions - STARTER
edge:starter:waiting:running:start{do:glob=0}
edge:belt:waiting:approach:start{}
# The starting transition transitions to the initial funnel __initFunnel__
edge:rob:waiting:__initFunnel__:start{do:ctrl=__initCtrlClock__;local=__initLocalClock__}

# The transitions - BELT For Catching
# The events catch and deliver have to reappear in rob
# Catching -> Increment carried
edge:belt:arrived:approach:catch{provided:carried<__maxCarry__:do:carried=carried+1}
# Delivering -> Increase delivered by carried
edge:belt:approach:approach:deliver{provided:carried>0:do:delivered=delivered+carried; carried=0}
# Success transition
edge:belt:approach:success:noaction{provided:delivered== __nbrPack__}
# The transitions when a package arrives have to be set by python
# Belt Arriving Transitions
__BeltArrivingTrans__


# Transitions in the funnel system with events
__RobFunnelTrans__









